{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/","matchPath":"/*","result":{"data":{"deck":{"id":"f5e053ca-64b5-5560-a9c4-59746b060986","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar themes = [future, nightOwl, dots];\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Notes = makeShortcode(\"Notes\");\nvar layoutProps = {\n  themes: themes,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Image, {\n    src: \"images/dream-mascot-white.svg\",\n    size: \"7%\",\n    mdxType: \"Image\"\n  }), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"La table ronde est convoqu\\xE9 pour parler d'un sujet important.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"L'odre du jour sera sous le theme du poop.\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"90\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Le nombre de souscription\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"????\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Le nombre de mutation \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"...et autant de souscription manquante et de feature que notre PO s'interdit\\nde penser parce qu'elle sait que le temps r\\xE9el lui cooute en bras. C'est cocasse dans une appli o\\xF9\\nle temps reel est la base de tout.\"))), mdx(\"hr\", null), mdx(Image, {\n    src: \"images/word-art.png\",\n    size: \"40%\",\n    mdxType: \"Image\"\n  }), mdx(\"hr\", null), mdx(\"p\", null, \"Une histoire.\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Il etait une fois...\\\" file=./scenarios/hell/hell-1.js\",\n    \"title\": \"\\\"Il\",\n    \"etait\": true,\n    \"une\": true,\n    \"fois...\\\"\": true,\n    \"file\": \"./scenarios/hell/hell-1.js\"\n  }), \"export default {\\n  apollo: {\\n    availableChiottes: {\\n      query: GET_AVAILABLE_CHIOTTES,\\n      variables () {\\n        return { agenceId: this.agenceId };\\n      },\\n      skip () {\\n        return !this.agenceId;\\n      },\\n      update: (data) => data.agence.availableChiottes\\n    },\\n  },\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Un homme avec des besoins...\\\" file=./scenarios/hell/hell-2.js\",\n    \"title\": \"\\\"Un\",\n    \"homme\": true,\n    \"avec\": true,\n    \"des\": true,\n    \"besoins...\\\"\": true,\n    \"file\": \"./scenarios/hell/hell-2.js\"\n  }), \"export default {\\n  apollo: {\\n    availableChiottes: {\\n      query: GET_AVAILABLE_CHIOTTES,\\n      variables () {\\n        return { agenceId: this.agenceId };\\n      },\\n      skip () {\\n        return !this.agenceId;\\n      },\\n      update: (data) => data.agence.availableChiottes,\\n      subscribeToMore: [\\n        {\\n          document: ON_PARTICIPANT_JOIN,\\n          variables () {\\n            return { agenceId: this.agenceId };\\n          },\\n          updateQuery (previousResult, { subscriptionData }) {\\n            return {\\n              ...previousResult,\\n              agence: {\\n                ...previousResult.agence,\\n                availableChiottes: [\\n                  ...previousResult.agence.availableChiottes,\\n                  subscriptionData.data.participantJoin.chiote\\n                ]\\n              }\\n            }\\n          } \\n        },\\n      ]\\n    },\\n  },\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Un homme avec des besoins...\\\" file=./scenarios/hell/hell-3.js\",\n    \"title\": \"\\\"Un\",\n    \"homme\": true,\n    \"avec\": true,\n    \"des\": true,\n    \"besoins...\\\"\": true,\n    \"file\": \"./scenarios/hell/hell-3.js\"\n  }), \"export default {\\n  apollo: {\\n    availableChiottes: {\\n      query: GET_AVAILABLE_CHIOTTES,\\n      variables () {\\n        return { agenceId: this.agenceId };\\n      },\\n      skip () {\\n        return !this.agenceId;\\n      },\\n      update: (data) => data.agence.availableChiottes,\\n      subscribeToMore: [\\n        {\\n          document: ON_PARTICIPANT_JOIN,\\n          variables () {\\n            return { agenceId: this.agenceId };\\n          },\\n          updateQuery (previousResult, { subscriptionData }) {\\n            return {\\n              ...previousResult,\\n              agence: {\\n                ...previousResult.agence,\\n                availableChiottes: [\\n                  ...previousResult.agence.availableChiottes,\\n                  subscriptionData.data.participantJoin.chiote\\n                ]\\n              }\\n            }\\n          } \\n        },\\n        {\\n          document: ON_PARTICIPANT_LEFT,\\n          variables () {\\n            return { agenceId: this.agenceId };\\n          },\\n          updateQuery (previousResult, { subscriptionData }) {\\n            const chioteIndex = previousResult.agence.availableChiottes.findIndex((chiote) => chiote.id === subscriptionData.data.participantLeft.id);\\n\\n            return merge({\\n              agence: {\\n                availableChiottes: remove(previousResult.agence.availableChiottes, chioteIndex)\\n              }\\n            });\\n          } \\n        },\\n      ]\\n    },\\n  },\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Qui connaissait les limites.\\\" file=./scenarios/hell/hell-4.js\",\n    \"title\": \"\\\"Qui\",\n    \"connaissait\": true,\n    \"les\": true,\n    \"limites.\\\"\": true,\n    \"file\": \"./scenarios/hell/hell-4.js\"\n  }), \"export default {\\n  apollo: {\\n    availableChiottes: {\\n      query: GET_AVAILABLE_CHIOTTES,\\n      variables () {\\n        return { agenceId: this.agenceId };\\n      },\\n      skip () {\\n        return !this.agenceId;\\n      },\\n      update: (data) => data.agence.availableChiottes,\\n      subscribeToMore: [\\n        {\\n          document: ON_PARTICIPANT_JOIN,\\n          variables () {\\n            return { agenceId: this.agenceId };\\n          },\\n          updateQuery (previousResult, { subscriptionData }) {\\n            return {\\n              ...previousResult,\\n              agence: {\\n                ...previousResult.agence,\\n                availableChiottes: [\\n                  ...previousResult.agence.availableChiottes,\\n                  subscriptionData.data.participantJoin.chiote\\n                ]\\n              }\\n            }\\n          } \\n        },\\n        {\\n          document: ON_PARTICIPANT_LEFT,\\n          variables () {\\n            return { agenceId: this.agenceId };\\n          },\\n          updateQuery (previousResult, { subscriptionData }) {\\n            const chioteIndex = previousResult.agence.availableChiottes.findIndex((chiote) => chiote.id === subscriptionData.data.participantLeft.id);\\n\\n            return merge({\\n              agence: {\\n                availableChiottes: remove(previousResult.agence.availableChiottes, chioteIndex)\\n              }\\n            });\\n          } \\n        },\\n      ]\\n    },\\n\\n    $subscribe: [\\n      {\\n        query: ON_LUDO_3PM,\\n        variables () {\\n          return { ludoId: this.ludoId };\\n        },\\n        skip () {\\n          return this.me.id === this.ludoId;\\n        },\\n        result () {\\n          this.doNotUseChiotte = true\\n        } \\n      },\\n    ],\\n  },\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Il attendait son heure...\\\" file=./scenarios/hell/hell-5.js\",\n    \"title\": \"\\\"Il\",\n    \"attendait\": true,\n    \"son\": true,\n    \"heure...\\\"\": true,\n    \"file\": \"./scenarios/hell/hell-5.js\"\n  }), \"export default {\\n  apollo: {\\n    availableChiottes: {\\n      query: GET_AVAILABLE_CHIOTTES,\\n      variables () {\\n        return { agenceId: this.agenceId };\\n      },\\n      skip () {\\n        return !this.agenceId;\\n      },\\n      update: (data) => data.agence.availableChiottes,\\n      subscribeToMore: [\\n        {\\n          document: ON_PARTICIPANT_JOIN,\\n          variables () {\\n            return { agenceId: this.agenceId };\\n          },\\n          updateQuery (previousResult, { subscriptionData }) {\\n            return {\\n              ...previousResult,\\n              agence: {\\n                ...previousResult.agence,\\n                availableChiottes: [\\n                  ...previousResult.agence.availableChiottes,\\n                  subscriptionData.data.participantJoin.chiote\\n                ]\\n              }\\n            }\\n          } \\n        },\\n        {\\n          document: ON_PARTICIPANT_LEFT,\\n          variables () {\\n            return { agenceId: this.agenceId };\\n          },\\n          updateQuery (previousResult, { subscriptionData }) {\\n            const chioteIndex = previousResult.agence.availableChiottes.findIndex((chiote) => chiote.id === subscriptionData.data.participantLeft.id);\\n\\n            return merge({\\n              agence: {\\n                availableChiottes: remove(previousResult.agence.availableChiottes, chioteIndex)\\n              }\\n            });\\n          } \\n        },\\n      ]\\n    },\\n\\n    $subscribe: [\\n      {\\n        query: ON_LUDO_3PM,\\n        variables () {\\n          return { ludoId: this.ludoId };\\n        },\\n        skip () {\\n          return this.me.id === this.ludoId;\\n        },\\n        result () {\\n          this.doNotUseChiotte = true\\n        } \\n      },\\n    ],\\n  },\\n\\n  computed: {\\n    chiotteToUse () {\\n      if (this.doNotUseChiotte) return;\\n\\n      return this.availableChiottes?.[0];\\n    },\\n  },\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"A l'affut du danger.\\\" file=./scenarios/hell/hell-6.js\",\n    \"title\": \"\\\"A\",\n    \"l'affut\": true,\n    \"du\": true,\n    \"danger.\\\"\": true,\n    \"file\": \"./scenarios/hell/hell-6.js\"\n  }), \"export default {\\n  apollo: {\\n    availableChiottes: {\\n      query: GET_AVAILABLE_CHIOTTES,\\n      variables () {\\n        return { agenceId: this.agenceId };\\n      },\\n      skip () {\\n        return !this.agenceId;\\n      },\\n      update: (data) => data.agence.availableChiottes,\\n      subscribeToMore: [\\n        {\\n          document: ON_PARTICIPANT_JOIN,\\n          variables () {\\n            return { agenceId: this.agenceId };\\n          },\\n          updateQuery (previousResult, { subscriptionData }) {\\n            return {\\n              ...previousResult,\\n              agence: {\\n                ...previousResult.agence,\\n                availableChiottes: [\\n                  ...previousResult.agence.availableChiottes,\\n                  subscriptionData.data.participantJoin.chiote\\n                ]\\n              }\\n            }\\n          } \\n        },\\n        {\\n          document: ON_PARTICIPANT_LEFT,\\n          variables () {\\n            return { agenceId: this.agenceId };\\n          },\\n          updateQuery (previousResult, { subscriptionData }) {\\n            const chioteIndex = previousResult.agence.availableChiottes.findIndex((chiote) => chiote.id === subscriptionData.data.participantLeft.id);\\n\\n            return merge({\\n              agence: {\\n                availableChiottes: remove(previousResult.agence.availableChiottes, chioteIndex)\\n              }\\n            });\\n          } \\n        },\\n      ]\\n    },\\n\\n    $subscribe: [\\n      {\\n        query: ON_LUDO_3PM,\\n        variables () {\\n          return { ludoId: this.ludoId };\\n        },\\n        skip () {\\n          return this.me.id === this.ludoId;\\n        },\\n        result () {\\n          this.doNotUseChiotte = true\\n        } \\n      },\\n      {\\n        query: ON_NERF_WAR_START,\\n        variables () {\\n          return { agenceId: this.agenceId };\\n        },\\n        skip () {\\n          return !this.agenceId;\\n        },\\n        result () {\\n          this.ongoingWar = true\\n        }\\n      },\\n    ],\\n  },\\n\\n  computed: {\\n    chiotteToUse () {\\n      if (this.doNotUseChiotte) return;\\n\\n      return this.availableChiottes?.[0];\\n    },\\n  },\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"A la menace, il repondait.\\\" file=./scenarios/hell/hell-7.js\",\n    \"title\": \"\\\"A\",\n    \"la\": true,\n    \"menace,\": true,\n    \"il\": true,\n    \"repondait.\\\"\": true,\n    \"file\": \"./scenarios/hell/hell-7.js\"\n  }), \"export default {\\n  apollo: {\\n    availableChiottes: {\\n      query: GET_AVAILABLE_CHIOTTES,\\n      variables () {\\n        return { agenceId: this.agenceId };\\n      },\\n      skip () {\\n        return !this.agenceId;\\n      },\\n      update: (data) => data.agence.availableChiottes,\\n      subscribeToMore: [\\n        {\\n          document: ON_PARTICIPANT_JOIN,\\n          variables () {\\n            return { agenceId: this.agenceId };\\n          },\\n          updateQuery (previousResult, { subscriptionData }) {\\n            return {\\n              ...previousResult,\\n              agence: {\\n                ...previousResult.agence,\\n                availableChiottes: [\\n                  ...previousResult.agence.availableChiottes,\\n                  subscriptionData.data.participantJoin.chiote\\n                ]\\n              }\\n            }\\n          } \\n        },\\n        {\\n          document: ON_PARTICIPANT_LEFT,\\n          variables () {\\n            return { agenceId: this.agenceId };\\n          },\\n          updateQuery (previousResult, { subscriptionData }) {\\n            const chioteIndex = previousResult.agence.availableChiottes.findIndex((chiote) => chiote.id === subscriptionData.data.participantLeft.id);\\n\\n            return merge({\\n              agence: {\\n                availableChiottes: remove(previousResult.agence.availableChiottes, chioteIndex)\\n              }\\n            });\\n          } \\n        },\\n      ]\\n    },\\n\\n    $subscribe: [\\n      {\\n        query: ON_LUDO_3PM,\\n        variables () {\\n          return { ludoId: this.ludoId };\\n        },\\n        skip () {\\n          return this.me.id === this.ludoId;\\n        },\\n        result () {\\n          this.doNotUseChiotte = true\\n        } \\n      },\\n      {\\n        query: ON_NERF_WAR_START,\\n        variables () {\\n          return { agenceId: this.agenceId };\\n        },\\n        skip () {\\n          return !this.agenceId;\\n        },\\n        result () {\\n          this.ongoingWar = true\\n        }\\n      },\\n    ],\\n  },\\n\\n  computed: {\\n    chiotteToUse () {\\n      if (this.doNotUseChiotte) return;\\n\\n      return this.availableChiottes?.[0];\\n    },\\n  },\\n\\n  watch: {\\n    ongoingWar () {\\n      this.clearInterval(this.interval);\\n      \\n      if (!this.ongoingWar) return;\\n\\n      this.interval = setInterval(async () => {\\n        this.$apollo.mutate({\\n          query: FIRE_ROCKET,\\n          variables: { to: random(this.employees) },\\n          update (store, { data: { collateralDamage }}) {\\n            const query = store.readQuery({\\n              query: ACCIDENTS_DE_TRAVAIL,\\n              variables: { agenceId: this.agenceId }\\n            });\\n    \\n            store.writeQuery({\\n              query: ACCIDENTS_DE_TRAVAIL,\\n              variables: { agenceId: this.agenceId },\\n              data: {\\n                ...query,\\n               agence: {\\n                 accidents: [...query.agence.accidents, collateralDamage]\\n               } \\n              }\\n            });\\n          }\\n        });\\n      });\\n    }\\n  },\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"A la menace, il repondait...\\\" file=./scenarios/hell/hell-8.js\",\n    \"title\": \"\\\"A\",\n    \"la\": true,\n    \"menace,\": true,\n    \"il\": true,\n    \"repondait...\\\"\": true,\n    \"file\": \"./scenarios/hell/hell-8.js\"\n  }), \"export default {\\n  data: () => ({ \\n    doNotUseChiotte: false,\\n    ongoingWar: false,\\n  }),\\n  \\n  apollo: {\\n    me: getMe,\\n    employees () {\\n      return getEmployees({ agenceId: this.agenceId });\\n    },\\n    availableChiottes: {\\n      query: GET_AVAILABLE_CHIOTTES,\\n      variables () {\\n        return { agenceId: this.agenceId };\\n      },\\n      skip () {\\n        return !this.agenceId;\\n      },\\n      update: (data) => data.agence.availableChiottes,\\n      subscribeToMore: [\\n        {\\n          document: ON_PARTICIPANT_JOIN,\\n          variables () {\\n            return { agenceId: this.agenceId };\\n          },\\n          updateQuery (previousResult, { subscriptionData }) {\\n            return {\\n              ...previousResult,\\n              agence: {\\n                ...previousResult.agence,\\n                availableChiottes: [\\n                  ...previousResult.agence.availableChiottes,\\n                  subscriptionData.data.participantJoin.chiote\\n                ]\\n              }\\n            }\\n          } \\n        },\\n        {\\n          document: ON_PARTICIPANT_LEFT,\\n          variables () {\\n            return { agenceId: this.agenceId };\\n          },\\n          updateQuery (previousResult, { subscriptionData }) {\\n            const chioteIndex = previousResult.agence.availableChiottes.findIndex((chiote) => chiote.id === subscriptionData.data.participantLeft.id);\\n\\n            return merge({\\n              agence: {\\n                availableChiottes: remove(previousResult.agence.availableChiottes, chioteIndex)\\n              }\\n            });\\n          } \\n        },\\n      ]\\n    },\\n\\n    $subscribe: [\\n      {\\n        query: ON_LUDO_3PM,\\n        variables () {\\n          return { ludoId: this.ludoId };\\n        },\\n        skip () {\\n          return this.me.id === this.ludoId;\\n        },\\n        result () {\\n          this.doNotUseChiotte = true\\n        } \\n      },\\n      {\\n        query: ON_NERF_WAR_START,\\n        variables () {\\n          return { agenceId: this.agenceId };\\n        },\\n        skip () {\\n          return !this.agenceId;\\n        },\\n        result () {\\n          this.ongoingWar = true\\n        }\\n      },\\n    ],\\n  },\\n\\n  computed: {\\n    chiotteToUse () {\\n      if (this.doNotUseChiotte) return;\\n\\n      return this.availableChiottes?.[0];\\n    },\\n  },\\n\\n  watch: {\\n    ongoingWar () {\\n      this.clearInterval(this.interval);\\n      \\n      if (!this.ongoingWar) return;\\n\\n      this.interval = setInterval(async () => {\\n        this.$apollo.mutate({\\n          query: FIRE_ROCKET,\\n          variables: { to: random(this.employees) },\\n          update (store, { data: { collateralDamage }}) {\\n            const query = store.readQuery({\\n              query: ACCIDENTS_DE_TRAVAIL,\\n              variables: { agenceId: this.agenceId }\\n            });\\n    \\n            store.writeQuery({\\n              query: ACCIDENTS_DE_TRAVAIL,\\n              variables: { agenceId: this.agenceId },\\n              data: {\\n                ...query,\\n               agence: {\\n                 accidents: [...query.agence.accidents, collateralDamage]\\n               } \\n              }\\n            });\\n          }\\n        });\\n      });\\n    }\\n  },\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"De toutes ses forces...\\\" file=./scenarios/hell/hell-9.js\",\n    \"title\": \"\\\"De\",\n    \"toutes\": true,\n    \"ses\": true,\n    \"forces...\\\"\": true,\n    \"file\": \"./scenarios/hell/hell-9.js\"\n  }), \"export default {\\n  data: () => ({ \\n    doNotUseChiotte: false,\\n    ongoingWar: false,\\n  }),\\n  \\n  apollo: {\\n    me: getMe,\\n    employees () {\\n      return getEmployees({ agenceId: this.agenceId });\\n    },\\n    availableChiottes: {\\n      query: GET_AVAILABLE_CHIOTTES,\\n      variables () {\\n        return { agenceId: this.agenceId };\\n      },\\n      skip () {\\n        return !this.agenceId;\\n      },\\n      update: (data) => data.agence.availableChiottes,\\n      subscribeToMore: [\\n        {\\n          document: ON_PARTICIPANT_JOIN,\\n          variables () {\\n            return { agenceId: this.agenceId };\\n          },\\n          updateQuery (previousResult, { subscriptionData }) {\\n            return {\\n              ...previousResult,\\n              agence: {\\n                ...previousResult.agence,\\n                availableChiottes: [\\n                  ...previousResult.agence.availableChiottes,\\n                  subscriptionData.data.participantJoin.chiote\\n                ]\\n              }\\n            }\\n          } \\n        },\\n        {\\n          document: ON_PARTICIPANT_LEFT,\\n          variables () {\\n            return { agenceId: this.agenceId };\\n          },\\n          updateQuery (previousResult, { subscriptionData }) {\\n            const chioteIndex = previousResult.agence.availableChiottes.findIndex((chiote) => chiote.id === subscriptionData.data.participantLeft.id);\\n\\n            return merge({\\n              agence: {\\n                availableChiottes: remove(previousResult.agence.availableChiottes, chioteIndex)\\n              }\\n            });\\n          } \\n        },\\n      ]\\n    },\\n\\n    $subscribe: [\\n      {\\n        query: ON_LUDO_3PM,\\n        variables () {\\n          return { ludoId: this.ludoId };\\n        },\\n        skip () {\\n          return this.me.id === this.ludoId;\\n        },\\n        result () {\\n          this.doNotUseChiotte = true\\n        } \\n      },\\n      {\\n        query: ON_NERF_WAR_START,\\n        variables () {\\n          return { agenceId: this.agenceId };\\n        },\\n        skip () {\\n          return !this.agenceId;\\n        },\\n        result () {\\n          this.ongoingWar = true\\n        }\\n      },\\n      {\\n        query: ON_ACCIDENTS_DE_TRAVAIL,\\n        variables () {\\n          return { agenceId: this.agenceId };\\n        },\\n        skip () {\\n          return !this.agenceId;\\n        },\\n        result ({ data: collateralDamage }) {\\n          const query = apollo.readQuery({\\n            query: ACCIDENTS_DE_TRAVAIL,\\n            variables: { agenceId: this.agenceId }\\n          });\\n\\n          apollo.writeQuery({\\n            query: ACCIDENTS_DE_TRAVAIL,\\n            variables: { agenceId: this.agenceId },\\n            data: {\\n              ...query,\\n              agence: {\\n                accidents: [...query.agence.accidents, collateralDamage]\\n              } \\n            }\\n          });\\n        }\\n      },\\n    ],\\n  },\\n\\n  computed: {\\n    chiotteToUse () {\\n      if (this.doNotUseChiotte) return;\\n\\n      return this.availableChiottes?.[0];\\n    },\\n  },\\n\\n  watch: {\\n    ongoingWar () {\\n      this.clearInterval(this.interval);\\n      \\n      if (!this.ongoingWar) return;\\n\\n      this.interval = setInterval(async () => {\\n        this.$apollo.mutate({\\n          query: FIRE_ROCKET,\\n          variables: { to: random(this.employees) },\\n          update (store, { data: { collateralDamage }}) {\\n            const query = store.readQuery({\\n              query: ACCIDENTS_DE_TRAVAIL,\\n              variables: { agenceId: this.agenceId }\\n            });\\n    \\n            store.writeQuery({\\n              query: ACCIDENTS_DE_TRAVAIL,\\n              variables: { agenceId: this.agenceId },\\n              data: {\\n                ...query,\\n               agence: {\\n                 accidents: [...query.agence.accidents, collateralDamage]\\n               } \\n              }\\n            });\\n          }\\n        });\\n      });\\n    }\\n  },\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Pour atteindre son but...\\\" file=./scenarios/hell/hell-10.js\",\n    \"title\": \"\\\"Pour\",\n    \"atteindre\": true,\n    \"son\": true,\n    \"but...\\\"\": true,\n    \"file\": \"./scenarios/hell/hell-10.js\"\n  }), \"export default {\\n  data: () => ({ \\n    doNotUseChiotte: false,\\n    ongoingWar: false,\\n  }),\\n  \\n  apollo: {\\n    me: getMe,\\n    employees () {\\n      return getEmployees({ agenceId: this.agenceId });\\n    },\\n    availableChiottes: {\\n      query: GET_AVAILABLE_CHIOTTES,\\n      variables () {\\n        return { agenceId: this.agenceId };\\n      },\\n      skip () {\\n        return !this.agenceId;\\n      },\\n      update: (data) => data.agence.availableChiottes,\\n      subscribeToMore: [\\n        {\\n          document: ON_PARTICIPANT_JOIN,\\n          variables () {\\n            return { agenceId: this.agenceId };\\n          },\\n          updateQuery (previousResult, { subscriptionData }) {\\n            return {\\n              ...previousResult,\\n              agence: {\\n                ...previousResult.agence,\\n                availableChiottes: [\\n                  ...previousResult.agence.availableChiottes,\\n                  subscriptionData.data.participantJoin.chiote\\n                ]\\n              }\\n            }\\n          } \\n        },\\n        {\\n          document: ON_PARTICIPANT_LEFT,\\n          variables () {\\n            return { agenceId: this.agenceId };\\n          },\\n          updateQuery (previousResult, { subscriptionData }) {\\n            const chioteIndex = previousResult.agence.availableChiottes.findIndex((chiote) => chiote.id === subscriptionData.data.participantLeft.id);\\n\\n            return merge({\\n              agence: {\\n                availableChiottes: remove(previousResult.agence.availableChiottes, chioteIndex)\\n              }\\n            });\\n          } \\n        },\\n      ]\\n    },\\n\\n    $subscribe: [\\n      {\\n        query: ON_LUDO_3PM,\\n        variables () {\\n          return { ludoId: this.ludoId };\\n        },\\n        skip () {\\n          return this.me.id === this.ludoId;\\n        },\\n        result () {\\n          this.doNotUseChiotte = true\\n        } \\n      },\\n      {\\n        query: ON_NERF_WAR_START,\\n        variables () {\\n          return { agenceId: this.agenceId };\\n        },\\n        skip () {\\n          return !this.agenceId;\\n        },\\n        result () {\\n          this.ongoingWar = true\\n        }\\n      },\\n      {\\n        query: ON_ACCIDENTS_DE_TRAVAIL,\\n        variables () {\\n          return { agenceId: this.agenceId };\\n        },\\n        skip () {\\n          return !this.agenceId;\\n        },\\n        result ({ data: collateralDamage }) {\\n          const query = apollo.readQuery({\\n            query: ACCIDENTS_DE_TRAVAIL,\\n            variables: { agenceId: this.agenceId }\\n          });\\n\\n          apollo.writeQuery({\\n            query: ACCIDENTS_DE_TRAVAIL,\\n            variables: { agenceId: this.agenceId },\\n            data: {\\n              ...query,\\n              agence: {\\n                accidents: [...query.agence.accidents, collateralDamage]\\n              } \\n            }\\n          });\\n        }\\n      },\\n    ],\\n  },\\n\\n  computed: {\\n    chiotteToUse () {\\n      if (this.doNotUseChiotte) return;\\n\\n      return this.availableChiottes?.[0];\\n    },\\n\\n    myChiotte () {\\n      return hasPermission('to.chier') && !this.ongoingWar && this.chiotteToUse;\\n    }\\n  },\\n\\n  watch: {\\n    ongoingWar () {\\n      this.clearInterval(this.interval);\\n      \\n      if (!this.ongoingWar) return;\\n\\n      this.interval = setInterval(async () => {\\n        this.$apollo.mutate({\\n          query: FIRE_ROCKET,\\n          variables: { to: random(this.employees) },\\n          update (store, { data: { collateralDamage }}) {\\n            const query = store.readQuery({\\n              query: ACCIDENTS_DE_TRAVAIL,\\n              variables: { agenceId: this.agenceId }\\n            });\\n    \\n            store.writeQuery({\\n              query: ACCIDENTS_DE_TRAVAIL,\\n              variables: { agenceId: this.agenceId },\\n              data: {\\n                ...query,\\n               agence: {\\n                 accidents: [...query.agence.accidents, collateralDamage]\\n               } \\n              }\\n            });\\n          }\\n        });\\n      });\\n    }\\n  },\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"134\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"134 title=\\\"Pour atteindre son but...\\\" file=./scenarios/hell/hell-full.js\",\n    \"title\": \"\\\"Pour\",\n    \"atteindre\": true,\n    \"son\": true,\n    \"but...\\\"\": true,\n    \"file\": \"./scenarios/hell/hell-full.js\"\n  }), \"export default {\\n  data: () => ({ \\n    doNotUseChiotte: false,\\n    ongoingWar: false,\\n  }),\\n\\n  apollo: {\\n    me: getMe,\\n    employees () {\\n      return getEmployees({ agenceId: this.agenceId });\\n    },\\n    availableChiottes: {\\n      query: GET_AVAILABLE_CHIOTTES,\\n      variables () {\\n        return { agenceId: this.agenceId };\\n      },\\n      skip () {\\n        return !this.agenceId;\\n      },\\n      update: (data) => data.agence.availableChiottes,\\n      subscribeToMore: [\\n        {\\n          document: ON_PARTICIPANT_JOIN,\\n          variables () {\\n            return { agenceId: this.agenceId };\\n          },\\n          updateQuery (previousResult, { subscriptionData }) {\\n            return {\\n              ...previousResult,\\n              agence: {\\n                ...previousResult.agence,\\n                availableChiottes: [\\n                  ...previousResult.agence.availableChiottes,\\n                  subscriptionData.data.participantJoin.chiote\\n                ]\\n              }\\n            }\\n          } \\n        },\\n        {\\n          document: ON_PARTICIPANT_LEFT,\\n          variables () {\\n            return { agenceId: this.agenceId };\\n          },\\n          updateQuery (previousResult, { subscriptionData }) {\\n            const chioteIndex = previousResult.agence.availableChiottes.findIndex((chiote) => chiote.id === subscriptionData.data.participantLeft.id);\\n\\n            return merge({\\n              agence: {\\n                availableChiottes: remove(previousResult.agence.availableChiottes, chioteIndex)\\n              }\\n            });\\n          } \\n        }\\n      ]\\n    },\\n\\n    $subscribe: [\\n      {\\n        query: ON_LUDO_3PM,\\n        variables () {\\n          return { ludoId: this.ludoId };\\n        },\\n        skip () {\\n          return this.me.id === this.ludoId;\\n        },\\n        result () {\\n          this.doNotUseChiotte = true\\n        } \\n      },\\n      {\\n        query: ON_NERF_WAR_START,\\n        variables () {\\n          return { agenceId: this.agenceId };\\n        },\\n        skip () {\\n          return !this.agenceId;\\n        },\\n        result () {\\n          this.ongoingWar = true\\n        }\\n      },\\n      {\\n        query: ON_ACCIDENTS_DE_TRAVAIL,\\n        variables () {\\n          return { agenceId: this.agenceId };\\n        },\\n        skip () {\\n          return !this.agenceId;\\n        },\\n        result ({ data: collateralDamage }) {\\n          const query = apollo.readQuery({\\n            query: ACCIDENTS_DE_TRAVAIL,\\n            variables: { agenceId: this.agenceId }\\n          });\\n\\n          apollo.writeQuery({\\n            query: ACCIDENTS_DE_TRAVAIL,\\n            variables: { agenceId: this.agenceId },\\n            data: {\\n              ...query,\\n              agence: {\\n                accidents: [...query.agence.accidents, collateralDamage]\\n              } \\n            }\\n          });\\n        }\\n      },\\n    ],\\n  },\\n\\n  computed: {\\n    chiotteToUse () {\\n      if (this.doNotUseChiotte) return;\\n\\n      return this.availableChiottes?.[0];\\n    },\\n\\n    myChiotte () {\\n      return hasPermission('to.chier') && !this.ongoingWar && this.chiotteToUse;\\n    }\\n  },\\n\\n  watch: {\\n    ongoingWar () {\\n      this.clearInterval(this.interval);\\n      \\n      if (!this.ongoingWar) return;\\n\\n      this.interval = setInterval(async () => {\\n        this.$apollo.mutate({\\n          query: FIRE_ROCKET,\\n          variables: { to: random(this.employees) },\\n          refetchQueries: ['getBoards', 'getMeetings'],\\n          update (store, { data: { collateralDamage }}) {\\n            const query = store.readQuery({\\n              query: ACCIDENTS_DE_TRAVAIL,\\n              variables: { agenceId: this.agenceId }\\n            });\\n    \\n            store.writeQuery({\\n              query: ACCIDENTS_DE_TRAVAIL,\\n              variables: { agenceId: this.agenceId },\\n              data: {\\n                ...query,\\n               agence: {\\n                 accidents: [...query.agence.accidents, collateralDamage]\\n               } \\n              }\\n            });\\n          }\\n        });\\n      });\\n    }\\n  },\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Les chiottes.\\\" file=./scenarios/hell/hell-full.js\",\n    \"title\": \"\\\"Les\",\n    \"chiottes.\\\"\": true,\n    \"file\": \"./scenarios/hell/hell-full.js\"\n  }), \"export default {\\n  data: () => ({ \\n    doNotUseChiotte: false,\\n    ongoingWar: false,\\n  }),\\n\\n  apollo: {\\n    me: getMe,\\n    employees () {\\n      return getEmployees({ agenceId: this.agenceId });\\n    },\\n    availableChiottes: {\\n      query: GET_AVAILABLE_CHIOTTES,\\n      variables () {\\n        return { agenceId: this.agenceId };\\n      },\\n      skip () {\\n        return !this.agenceId;\\n      },\\n      update: (data) => data.agence.availableChiottes,\\n      subscribeToMore: [\\n        {\\n          document: ON_PARTICIPANT_JOIN,\\n          variables () {\\n            return { agenceId: this.agenceId };\\n          },\\n          updateQuery (previousResult, { subscriptionData }) {\\n            return {\\n              ...previousResult,\\n              agence: {\\n                ...previousResult.agence,\\n                availableChiottes: [\\n                  ...previousResult.agence.availableChiottes,\\n                  subscriptionData.data.participantJoin.chiote\\n                ]\\n              }\\n            }\\n          } \\n        },\\n        {\\n          document: ON_PARTICIPANT_LEFT,\\n          variables () {\\n            return { agenceId: this.agenceId };\\n          },\\n          updateQuery (previousResult, { subscriptionData }) {\\n            const chioteIndex = previousResult.agence.availableChiottes.findIndex((chiote) => chiote.id === subscriptionData.data.participantLeft.id);\\n\\n            return merge({\\n              agence: {\\n                availableChiottes: remove(previousResult.agence.availableChiottes, chioteIndex)\\n              }\\n            });\\n          } \\n        }\\n      ]\\n    },\\n\\n    $subscribe: [\\n      {\\n        query: ON_LUDO_3PM,\\n        variables () {\\n          return { ludoId: this.ludoId };\\n        },\\n        skip () {\\n          return this.me.id === this.ludoId;\\n        },\\n        result () {\\n          this.doNotUseChiotte = true\\n        } \\n      },\\n      {\\n        query: ON_NERF_WAR_START,\\n        variables () {\\n          return { agenceId: this.agenceId };\\n        },\\n        skip () {\\n          return !this.agenceId;\\n        },\\n        result () {\\n          this.ongoingWar = true\\n        }\\n      },\\n      {\\n        query: ON_ACCIDENTS_DE_TRAVAIL,\\n        variables () {\\n          return { agenceId: this.agenceId };\\n        },\\n        skip () {\\n          return !this.agenceId;\\n        },\\n        result ({ data: collateralDamage }) {\\n          const query = apollo.readQuery({\\n            query: ACCIDENTS_DE_TRAVAIL,\\n            variables: { agenceId: this.agenceId }\\n          });\\n\\n          apollo.writeQuery({\\n            query: ACCIDENTS_DE_TRAVAIL,\\n            variables: { agenceId: this.agenceId },\\n            data: {\\n              ...query,\\n              agence: {\\n                accidents: [...query.agence.accidents, collateralDamage]\\n              } \\n            }\\n          });\\n        }\\n      },\\n    ],\\n  },\\n\\n  computed: {\\n    chiotteToUse () {\\n      if (this.doNotUseChiotte) return;\\n\\n      return this.availableChiottes?.[0];\\n    },\\n\\n    myChiotte () {\\n      return hasPermission('to.chier') && !this.ongoingWar && this.chiotteToUse;\\n    }\\n  },\\n\\n  watch: {\\n    ongoingWar () {\\n      this.clearInterval(this.interval);\\n      \\n      if (!this.ongoingWar) return;\\n\\n      this.interval = setInterval(async () => {\\n        this.$apollo.mutate({\\n          query: FIRE_ROCKET,\\n          variables: { to: random(this.employees) },\\n          refetchQueries: ['getBoards', 'getMeetings'],\\n          update (store, { data: { collateralDamage }}) {\\n            const query = store.readQuery({\\n              query: ACCIDENTS_DE_TRAVAIL,\\n              variables: { agenceId: this.agenceId }\\n            });\\n    \\n            store.writeQuery({\\n              query: ACCIDENTS_DE_TRAVAIL,\\n              variables: { agenceId: this.agenceId },\\n              data: {\\n                ...query,\\n               agence: {\\n                 accidents: [...query.agence.accidents, collateralDamage]\\n               } \\n              }\\n            });\\n          }\\n        });\\n      });\\n    }\\n  },\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"131:152 title=\\\"Source de vérité.\\\" file=./scenarios/hell/hell-full.js\",\n    \"131:152\": true,\n    \"title\": \"\\\"Source\",\n    \"de\": true,\n    \"vérité.\\\"\": true,\n    \"file\": \"./scenarios/hell/hell-full.js\"\n  }), \"export default {\\n  data: () => ({ \\n    doNotUseChiotte: false,\\n    ongoingWar: false,\\n  }),\\n\\n  apollo: {\\n    me: getMe,\\n    employees () {\\n      return getEmployees({ agenceId: this.agenceId });\\n    },\\n    availableChiottes: {\\n      query: GET_AVAILABLE_CHIOTTES,\\n      variables () {\\n        return { agenceId: this.agenceId };\\n      },\\n      skip () {\\n        return !this.agenceId;\\n      },\\n      update: (data) => data.agence.availableChiottes,\\n      subscribeToMore: [\\n        {\\n          document: ON_PARTICIPANT_JOIN,\\n          variables () {\\n            return { agenceId: this.agenceId };\\n          },\\n          updateQuery (previousResult, { subscriptionData }) {\\n            return {\\n              ...previousResult,\\n              agence: {\\n                ...previousResult.agence,\\n                availableChiottes: [\\n                  ...previousResult.agence.availableChiottes,\\n                  subscriptionData.data.participantJoin.chiote\\n                ]\\n              }\\n            }\\n          } \\n        },\\n        {\\n          document: ON_PARTICIPANT_LEFT,\\n          variables () {\\n            return { agenceId: this.agenceId };\\n          },\\n          updateQuery (previousResult, { subscriptionData }) {\\n            const chioteIndex = previousResult.agence.availableChiottes.findIndex((chiote) => chiote.id === subscriptionData.data.participantLeft.id);\\n\\n            return merge({\\n              agence: {\\n                availableChiottes: remove(previousResult.agence.availableChiottes, chioteIndex)\\n              }\\n            });\\n          } \\n        }\\n      ]\\n    },\\n\\n    $subscribe: [\\n      {\\n        query: ON_LUDO_3PM,\\n        variables () {\\n          return { ludoId: this.ludoId };\\n        },\\n        skip () {\\n          return this.me.id === this.ludoId;\\n        },\\n        result () {\\n          this.doNotUseChiotte = true\\n        } \\n      },\\n      {\\n        query: ON_NERF_WAR_START,\\n        variables () {\\n          return { agenceId: this.agenceId };\\n        },\\n        skip () {\\n          return !this.agenceId;\\n        },\\n        result () {\\n          this.ongoingWar = true\\n        }\\n      },\\n      {\\n        query: ON_ACCIDENTS_DE_TRAVAIL,\\n        variables () {\\n          return { agenceId: this.agenceId };\\n        },\\n        skip () {\\n          return !this.agenceId;\\n        },\\n        result ({ data: collateralDamage }) {\\n          const query = apollo.readQuery({\\n            query: ACCIDENTS_DE_TRAVAIL,\\n            variables: { agenceId: this.agenceId }\\n          });\\n\\n          apollo.writeQuery({\\n            query: ACCIDENTS_DE_TRAVAIL,\\n            variables: { agenceId: this.agenceId },\\n            data: {\\n              ...query,\\n              agence: {\\n                accidents: [...query.agence.accidents, collateralDamage]\\n              } \\n            }\\n          });\\n        }\\n      },\\n    ],\\n  },\\n\\n  computed: {\\n    chiotteToUse () {\\n      if (this.doNotUseChiotte) return;\\n\\n      return this.availableChiottes?.[0];\\n    },\\n\\n    myChiotte () {\\n      return hasPermission('to.chier') && !this.ongoingWar && this.chiotteToUse;\\n    }\\n  },\\n\\n  watch: {\\n    ongoingWar () {\\n      this.clearInterval(this.interval);\\n      \\n      if (!this.ongoingWar) return;\\n\\n      this.interval = setInterval(async () => {\\n        this.$apollo.mutate({\\n          query: FIRE_ROCKET,\\n          variables: { to: random(this.employees) },\\n          refetchQueries: ['getBoards', 'getMeetings'],\\n          update (store, { data: { collateralDamage }}) {\\n            const query = store.readQuery({\\n              query: ACCIDENTS_DE_TRAVAIL,\\n              variables: { agenceId: this.agenceId }\\n            });\\n    \\n            store.writeQuery({\\n              query: ACCIDENTS_DE_TRAVAIL,\\n              variables: { agenceId: this.agenceId },\\n              data: {\\n                ...query,\\n               agence: {\\n                 accidents: [...query.agence.accidents, collateralDamage]\\n               } \\n              }\\n            });\\n          }\\n        });\\n      });\\n    }\\n  },\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"83:108 title=\\\"Source de Trump.\\\" file=./scenarios/hell/hell-full.js\",\n    \"83:108\": true,\n    \"title\": \"\\\"Source\",\n    \"de\": true,\n    \"Trump.\\\"\": true,\n    \"file\": \"./scenarios/hell/hell-full.js\"\n  }), \"export default {\\n  data: () => ({ \\n    doNotUseChiotte: false,\\n    ongoingWar: false,\\n  }),\\n\\n  apollo: {\\n    me: getMe,\\n    employees () {\\n      return getEmployees({ agenceId: this.agenceId });\\n    },\\n    availableChiottes: {\\n      query: GET_AVAILABLE_CHIOTTES,\\n      variables () {\\n        return { agenceId: this.agenceId };\\n      },\\n      skip () {\\n        return !this.agenceId;\\n      },\\n      update: (data) => data.agence.availableChiottes,\\n      subscribeToMore: [\\n        {\\n          document: ON_PARTICIPANT_JOIN,\\n          variables () {\\n            return { agenceId: this.agenceId };\\n          },\\n          updateQuery (previousResult, { subscriptionData }) {\\n            return {\\n              ...previousResult,\\n              agence: {\\n                ...previousResult.agence,\\n                availableChiottes: [\\n                  ...previousResult.agence.availableChiottes,\\n                  subscriptionData.data.participantJoin.chiote\\n                ]\\n              }\\n            }\\n          } \\n        },\\n        {\\n          document: ON_PARTICIPANT_LEFT,\\n          variables () {\\n            return { agenceId: this.agenceId };\\n          },\\n          updateQuery (previousResult, { subscriptionData }) {\\n            const chioteIndex = previousResult.agence.availableChiottes.findIndex((chiote) => chiote.id === subscriptionData.data.participantLeft.id);\\n\\n            return merge({\\n              agence: {\\n                availableChiottes: remove(previousResult.agence.availableChiottes, chioteIndex)\\n              }\\n            });\\n          } \\n        }\\n      ]\\n    },\\n\\n    $subscribe: [\\n      {\\n        query: ON_LUDO_3PM,\\n        variables () {\\n          return { ludoId: this.ludoId };\\n        },\\n        skip () {\\n          return this.me.id === this.ludoId;\\n        },\\n        result () {\\n          this.doNotUseChiotte = true\\n        } \\n      },\\n      {\\n        query: ON_NERF_WAR_START,\\n        variables () {\\n          return { agenceId: this.agenceId };\\n        },\\n        skip () {\\n          return !this.agenceId;\\n        },\\n        result () {\\n          this.ongoingWar = true\\n        }\\n      },\\n      {\\n        query: ON_ACCIDENTS_DE_TRAVAIL,\\n        variables () {\\n          return { agenceId: this.agenceId };\\n        },\\n        skip () {\\n          return !this.agenceId;\\n        },\\n        result ({ data: collateralDamage }) {\\n          const query = apollo.readQuery({\\n            query: ACCIDENTS_DE_TRAVAIL,\\n            variables: { agenceId: this.agenceId }\\n          });\\n\\n          apollo.writeQuery({\\n            query: ACCIDENTS_DE_TRAVAIL,\\n            variables: { agenceId: this.agenceId },\\n            data: {\\n              ...query,\\n              agence: {\\n                accidents: [...query.agence.accidents, collateralDamage]\\n              } \\n            }\\n          });\\n        }\\n      },\\n    ],\\n  },\\n\\n  computed: {\\n    chiotteToUse () {\\n      if (this.doNotUseChiotte) return;\\n\\n      return this.availableChiottes?.[0];\\n    },\\n\\n    myChiotte () {\\n      return hasPermission('to.chier') && !this.ongoingWar && this.chiotteToUse;\\n    }\\n  },\\n\\n  watch: {\\n    ongoingWar () {\\n      this.clearInterval(this.interval);\\n      \\n      if (!this.ongoingWar) return;\\n\\n      this.interval = setInterval(async () => {\\n        this.$apollo.mutate({\\n          query: FIRE_ROCKET,\\n          variables: { to: random(this.employees) },\\n          refetchQueries: ['getBoards', 'getMeetings'],\\n          update (store, { data: { collateralDamage }}) {\\n            const query = store.readQuery({\\n              query: ACCIDENTS_DE_TRAVAIL,\\n              variables: { agenceId: this.agenceId }\\n            });\\n    \\n            store.writeQuery({\\n              query: ACCIDENTS_DE_TRAVAIL,\\n              variables: { agenceId: this.agenceId },\\n              data: {\\n                ...query,\\n               agence: {\\n                 accidents: [...query.agence.accidents, collateralDamage]\\n               } \\n              }\\n            });\\n          }\\n        });\\n      });\\n    }\\n  },\\n}\\n\"))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Un homme avec des besoins\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ce qui se passe dans les toilettes reste dans les toilettes... adepte\\ndes souscriptions. Secte ?\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Source de v\\xE9rit\\xE9/Source de Trump\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"schema http + temps reel en parallele... source de verite.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Rustine pour cacher nos vrais problemes. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"On applique du scotch sur des fuites... \")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Metaphore\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"source de verite => scientique\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"source temps reel => trump\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"156\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Le nombre de ligne du composant\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"SANS TEMPLATE\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"supply slideshow = 634 lignes de spaghetti \"))), mdx(\"hr\", null), mdx(Image, {\n    src: \"images/game-in-a-twit.png\",\n    size: \"25%\",\n    mdxType: \"Image\"\n  }), mdx(\"i\", null, \"Pendant ce temps dans un autre univers...\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"Les tests nous sauverons\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./scenarios/hell/hell-computed-1.js\",\n    \"file\": \"./scenarios/hell/hell-computed-1.js\"\n  }), \"computed: {\\n  chiotteToUse () {\\n    if (this.doNotUseChiotte) return;\\n\\n    return this.availableChiottes?.[0];\\n  },\\n\\n  myChiotte () {\\n    return hasPermission('to.chier') && !this.ongoingWar && this.chiotteToUse;\\n  },\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./scenarios/hell/hell-test-1.js\",\n    \"file\": \"./scenarios/hell/hell-test-1.js\"\n  }), \"test('What the fuck am i testing', () => {\\n  mock('@/has-permission', () => true);\\n\\n  const wrapper = shallowMount(Hell, {\\n    propsData: { ludoId: Id() },\\n    computed: {\\n      chiotteToUse: () => chiotteMock\\n    }\\n  });\\n  \\n  wrapper.setData({ ongoingWar: true });\\n  expect(wrapper.vm.myChiotte).toBe(false);\\n});\\n\"))), mdx(Step, {\n    title: \"...\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./scenarios/hell/hell-computed-1.js\",\n    \"file\": \"./scenarios/hell/hell-computed-1.js\"\n  }), \"computed: {\\n  chiotteToUse () {\\n    if (this.doNotUseChiotte) return;\\n\\n    return this.availableChiottes?.[0];\\n  },\\n\\n  myChiotte () {\\n    return hasPermission('to.chier') && !this.ongoingWar && this.chiotteToUse;\\n  },\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./scenarios/hell/hell-test-2.js\",\n    \"file\": \"./scenarios/hell/hell-test-2.js\"\n  }), \"test('What the fuck am i testing', () => {\\n  mock('@/has-permission', () => true);\\n\\n  const wrapper = shallowMount(Hell, {\\n    propsData: { ludoId: Id() },\\n    computed: {\\n      chiotteToUse: () => chiotteMock\\n    }\\n  });\\n\\n  wrapper.setData({ ongoingWar: true });\\n  expect(wrapper.vm.myChiotte).toBe(false);\\n});\\n\\n// ... une journ\\xE9e plus tard\\n// ... mon appli est test\\xE9 aux petits oignons\\n// ... j'ai les 8 combinaisons, je doute de rien  :thumbsup:\\n\"))), mdx(Step, {\n    title: \"Bug appeared and...  it's fix guys !\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./scenarios/hell/hell-computed-2.js\",\n    \"file\": \"./scenarios/hell/hell-computed-2.js\"\n  }), \"computed: {\\n  chiotteToUse () {\\n    if (this.doNotUseChiotte) return;\\n\\n    return this.availableChiottes?.[0];\\n  },\\n\\n  myChiotte () {\\n    return hasPermission('to.chier') && !this.ongoingWar && this.chiotteToUse;\\n  },\\n\\n  justUseThisChiotte () {\\n    return iDontHaveTimeToReadYour600LinesOfShit;\\n  },\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./scenarios/hell/hell-test-2.js\",\n    \"file\": \"./scenarios/hell/hell-test-2.js\"\n  }), \"test('What the fuck am i testing', () => {\\n  mock('@/has-permission', () => true);\\n\\n  const wrapper = shallowMount(Hell, {\\n    propsData: { ludoId: Id() },\\n    computed: {\\n      chiotteToUse: () => chiotteMock\\n    }\\n  });\\n\\n  wrapper.setData({ ongoingWar: true });\\n  expect(wrapper.vm.myChiotte).toBe(false);\\n});\\n\\n// ... une journ\\xE9e plus tard\\n// ... mon appli est test\\xE9 aux petits oignons\\n// ... j'ai les 8 combinaisons, je doute de rien  :thumbsup:\\n\"))), mdx(Step, {\n    title: \"Oops\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./scenarios/hell/hell-computed-2.js\",\n    \"file\": \"./scenarios/hell/hell-computed-2.js\"\n  }), \"computed: {\\n  chiotteToUse () {\\n    if (this.doNotUseChiotte) return;\\n\\n    return this.availableChiottes?.[0];\\n  },\\n\\n  myChiotte () {\\n    return hasPermission('to.chier') && !this.ongoingWar && this.chiotteToUse;\\n  },\\n\\n  justUseThisChiotte () {\\n    return iDontHaveTimeToReadYour600LinesOfShit;\\n  },\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./scenarios/hell/hell-test-3.js\",\n    \"file\": \"./scenarios/hell/hell-test-3.js\"\n  }), \"test('What the fuck am i testing', () => {\\n  mock('@/has-permission', () => true);\\n\\n  const wrapper = shallowMount(Hell, {\\n    propsData: { ludoId: Id() },\\n    computed: {\\n      chiotteToUse: () => chiotteMock\\n    }\\n  });\\n\\n  wrapper.setData({ ongoingWar: true });\\n  expect(wrapper.vm.myChiotte).toBe(false);\\n});\\n\\n// ... une journ\\xE9e plus tard\\n// ... mon appli est test\\xE9 aux petits oignons\\n// ... j'ai les 8 combinaisons, je doute de rien  :thumbsup:\\n\\n// ... \\n// ... \\n// ... \\n// ...  Wait ? What sorcery is this ?\\n// ...  Dude ! \\n// ... (\\u256F\\xB0\\u25A1\\xB0\\uFF09\\u256F\\uFE35 \\u253B\\u2501\\u253B\\n\")))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"p\", null, \"...Petit appart\\xE9..\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Retro\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\\"L'enfer du code n'existe pas\\\"... \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\\"Ou est ce que vous trouvez qu'il y'a des problemes\\\"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\\"Les tests unitaires vont nous sauver\\\"\"))), mdx(\"hr\", null), mdx(\"p\", null, \"Des croisements.\"), mdx(\"hr\", null), mdx(Image, {\n    src: \"images/croisement.jpg\",\n    size: \"25%\",\n    mdxType: \"Image\"\n  }), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Yann/Reu scrum\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Inversers son croisement de bras est contre intuitif\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Sentiment\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"N'avez vous pas l'impression que notre stack n'est pas adapt\\xE9 \\xE0 nos besoins ?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Qu'elle n'est pas naturel.\"))), mdx(\"hr\", null), mdx(Image, {\n    src: \"images/sko@2x.png\",\n    size: \"30%\",\n    mdxType: \"Image\"\n  }), mdx(\"i\", null, \"Un pi\\xE8ge ?\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Pi\\xE8ge\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A aucun moment vous vous etes dit \\\"c'est un piege, il faut que je rajoute une couche http\\\"...\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Utilisez uniquement les websocket vous a sembl\\xE9 naturel. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Rajoutez de l'http... et ne vous passerez pas un bon moment.\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Quotiden\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Team: \\\"Beekast trop complexe\\\" \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"reponse: Vu le nombre de souscription et de contrainte qu'on se rajoute...\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Team: \\\"On aura jamais le temps\\\"... \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"reponse: mais on a le temps de faire les choses en 2 ou 3 fois sans probleme\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"flex time: Pour info, le serveur de mon premier sko tient sur 60/70 lignes avec plus de fonctionnalit\\xE9s que tout ceux qu'on a pu voir jusqu'\\xE0 maintenant\\navec un temps de dev moins long. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Et comment j'ai fait ca ? On va y venir\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ils ont pris du temps \\xE0 cause d'un trop grand nombre d'events... (rien que penser \\xE0 comment les nommer...)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Si on continue comme ca effectivement on sortira jamais rien. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Apollo aura finit de croiser l'univers qu'on aura toujours pas produit d'activit\\xE9.\"))), mdx(\"hr\", null), mdx(Image, {\n    src: \"images/ghostbusters.jpg\",\n    size: \"70%\",\n    mdxType: \"Image\"\n  }, mdx(\"h1\", null, \"Apollolol\")), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Autre croisement\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ne croisez pas les effluves\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Perf apocalyptique d'apollo.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Apollo: \\\"Moi je croise les effluves ansi que tout l'univers. Et alors ?\\\"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Francois regarde des trucs sur le sujet pour am\\xE9liorer le truc\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Une nouvelle \\xE8re\"), mdx(\"hr\", null), mdx(\"h1\", null, \"What if ...\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"On pourrait s'astreindre de toutes ces problematiques\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Foutre \\xE0 la poubelle apollo\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Question\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Mais en vrai est ce qu'on a besoin d'http ? \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Des boites on levait des millions sans http... (Meteor).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Alors pourquoi pas nous ?\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"First reunion\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"eux: \\\"Gardons la stack parce qu'on la connait\\\"... \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"reponse: on garde une stack pour ce qu'elle nous apporte\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"et en l'occurrence on ne connait pas notre stack\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"on critique toujours les microservices alors qu'on en fait pas reellement\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"analogie: voiture + freins \\xE0 main enclench\\xE9 = bordel elle avance pas\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"I could simply do that\\\" file=./scenarios/beekast-universe/beekast-universe-1.js\",\n    \"title\": \"\\\"I\",\n    \"could\": true,\n    \"simply\": true,\n    \"do\": true,\n    \"that\\\"\": true,\n    \"file\": \"./scenarios/beekast-universe/beekast-universe-1.js\"\n  }), \"export default {\\n  apollo: {\\n    universe: {\\n      query: GET_BEEKAST_UNIVERSE,\\n      variable () {\\n        return { poleId: this.poleId };\\n      },\\n      update: (data) => data.universe,\\n      subscribeToMore: {\\n        document: ON_BEEKAST_UNIVERSE_CHANGE,\\n        variable () {\\n          return { poleId: this.poleId };\\n        },\\n        updateQuery (previousResult, { data: { changes } }) {\\n          return merge(previousResult, changes);\\n        }\\n      }\\n    },\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Or even better...\\\" file=./scenarios/beekast-universe/beekast-universe-2.js\",\n    \"title\": \"\\\"Or\",\n    \"even\": true,\n    \"better...\\\"\": true,\n    \"file\": \"./scenarios/beekast-universe/beekast-universe-2.js\"\n  }), \"export default {\\n  data: () => ({ universe: {} }),\\n  apollo: {\\n    $subscribe: {\\n      // On peut imaginer recuperer automatiquement notre univers\\n      // d\\xE8s la souscription\\n      query: ON_BEEKAST_UNIVERSE,\\n      variable () {\\n        return { poleId: this.poleId };\\n      },\\n      result: ({ data: universeState }) => {\\n        return merge(this.universe, universeState);\\n      }\\n    }\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:9 title=\\\"Or even better...\\\" file=./scenarios/beekast-universe/beekast-universe-3.vue\",\n    \"1:9\": true,\n    \"title\": \"\\\"Or\",\n    \"even\": true,\n    \"better...\\\"\": true,\n    \"file\": \"./scenarios/beekast-universe/beekast-universe-3.vue\"\n  }), \"<template>\\n  <div class=\\\"GoToChiotteScenario\\\">\\n    <WarScene v-if=\\\"universe.ongoingWar\\\" :universe=\\\"universe\\\"/>\\n    <ChiotteScene \\n      v-else-if=\\\"universe.me.selectedChiotte\\\" \\n      :chiotte=\\\"universe.me.selectedChiotte\\\"/>\\n    <DesktopScene v-else :universe=\\\"universe\\\"></DesktopScene>\\n  </div>\\n</template>\\n\\n<script>\\nexport default {\\n  data: () => ({ universe: {} }),\\n  apollo: {\\n    $subscribe: {\\n      // On peut imaginer recuperer automatiquement notre univers\\n      // d\\xE8s la souscription\\n      query: ON_BEEKAST_UNIVERSE,\\n      variable () {\\n        return { poleId: this.poleId };\\n      },\\n      result: ({ data: universeState }) => {\\n        return merge(this.universe, universeState);\\n      }\\n    }\\n  }\\n}\\n<script>\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"26\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Nombre de lignes au total qui compose le composant precedent\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Soit 130 lignes supprim\\xE9es sur tous les composants du meme style (on en a des dizaines qui font ca)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Soit 1300 lignes supprim\\xE9es au minimum\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"R\\xEAvons\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ouvrez vos chakra\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Moi je r\\xEAve d'un monde...\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"O\\xF9 l'on cesserait de me rappeller que c'est mon trvail. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pourtant tout est fait ici pour te la rappeler. (L'enfer du code)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"D'un \\xE9tat d'esprit personnel different\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"... Je vais ca faire comme ca\\\"... parce que c'est comme ca que c'est fait actuellement meme si c'est naze. Ma MR sera accept\\xE9 est mon moral s'en portera mieux. )\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Notre merde est contagieuse. \")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Sentiment\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Team: \\\"Beekast est particulier\\\", \\\"Vous en connaissez beaucoup des sites avec autant de temps reel ?\\\"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"reponse: Perso oui... et vous aussi. Une id\\xE9e ?\"))), mdx(\"hr\", null), mdx(Image, {\n    src: \"images/censored.png\",\n    size: \"30%\",\n    mdxType: \"Image\"\n  }), mdx(\"hr\", null), mdx(Image, {\n    src: \"images/map-to-game.png\",\n    size: \"70%\",\n    mdxType: \"Image\"\n  }), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"En faisant un jeu c'est toute notre facon de pens\\xE9e et de travailler qui change.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Activit\\xE9s = Donjon\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Zone = Raid\"))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"But\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ca force le build et le produit \\xE0 travailler en \\xE9troite relation... en tout cas d'avantage qu'aujourd'hui\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"pour valider un gameplay que le produit a pens\\xE9 sur le papier.... mais le papier differe de la r\\xE9alit\\xE9.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"On ne peut pas obtenir le bon feeling du premier coup. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"On admet que le produit peut se tromper ! On nous donne jamais quelque chose qui est 100% ok. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"On admet que l'us change totalement en cours de route si le feeling n'est pas aux rendez vous.\"))), mdx(\"hr\", null), mdx(\"p\", null, \"Jouons.\"), mdx(\"hr\", null), mdx(\"p\", null, \"\\\"L'utilisateur ne demande pas, il agit.\\\"\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Changement de paradigme. Changement d'etat d'esprit.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Il se deplace, emet des actions, il fait sa vie...\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Le serveur est autoritaire. C'est lui le boss.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Chaque chose \\xE0 sa place.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Le front n'a plus aucune logique ! Si ce n'est l'ouverture de popup\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Allegorie de notre systeme actuel \\xE0 partir d'un FPS\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Souscription aux armes (ah merde j'ai oubli\\xE9 de prendre en compte le couteau), aux deplacements (ah merde j'ai oubli\\xE9 le saut), aux morts, aux scores, aux temps, aux rounds... etc\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Je me deplace sur la map et le serveur me renvoie des conneries, en l'occurence ici, des slides\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Alors qu'actuellement, je reclame toutes les conneries qui sont suscpetibles de m'arriver (plus ou moins)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A prendre avec des pincettes... \"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"4:7 title=\\\"On demande\\\" file=./scenarios/beekast-universe/beekast-universe-1.js\",\n    \"4:7\": true,\n    \"title\": \"\\\"On\",\n    \"demande\\\"\": true,\n    \"file\": \"./scenarios/beekast-universe/beekast-universe-1.js\"\n  }), \"export default {\\n  apollo: {\\n    universe: {\\n      query: GET_BEEKAST_UNIVERSE,\\n      variable () {\\n        return { poleId: this.poleId };\\n      },\\n      update: (data) => data.universe,\\n      subscribeToMore: {\\n        document: ON_BEEKAST_UNIVERSE_CHANGE,\\n        variable () {\\n          return { poleId: this.poleId };\\n        },\\n        updateQuery (previousResult, { data: { changes } }) {\\n          return merge(previousResult, changes);\\n        }\\n      }\\n    },\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"14\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"14 title=\\\"On agit\\\" file=./scenarios/dream/dream-component.vue\",\n    \"title\": \"\\\"On\",\n    \"agit\\\"\": true,\n    \"file\": \"./scenarios/dream/dream-component.vue\"\n  }), \"<template>\\n  <div class=\\\"GoToChiotteScenario\\\">\\n    <WarScene v-if=\\\"$store.ongoingWar\\\" :agence=\\\"$store.agence\\\"/>\\n    <ChiotteScene \\n      v-else-if=\\\"$store.selectedChiotte\\\" \\n      :chiotte=\\\"$store.selectedChiotte\\\"/>\\n    <DesktopScene v-else :agence=\\\"$store.agence\\\"></DesktopScene>\\n  </div>\\n</template>\\n\\n<script>\\nexport default {\\n  created () {\\n    this.$socket.emit('agence.join');\\n  }\\n}\\n</script>\\n\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"La demande...\\\" file=./scenarios/beekast-universe/beekast-universe-comparaison.vue\",\n    \"title\": \"\\\"La\",\n    \"demande...\\\"\": true,\n    \"file\": \"./scenarios/beekast-universe/beekast-universe-comparaison.vue\"\n  }), \"<template>\\n  <div class=\\\"GoToChiotteScenario\\\">\\n    <WarScene v-if=\\\"universe.ongoingWar\\\" :universe=\\\"universe\\\"/>\\n    <ChiotteScene \\n      v-else-if=\\\"universe.me.selectedChiotte\\\" \\n      :chiotte=\\\"universe.me.selectedChiotte\\\"/>\\n    <DesktopScene v-else :universe=\\\"universe\\\"></DesktopScene>\\n  </div>\\n</template>\\n\\n<script>\\nexport default {\\n  apollo: {\\n    universe: {\\n      query: GET_BEEKAST_UNIVERSE,\\n      variable () {\\n        return { poleId: this.poleId };\\n      },\\n      update: (data) => data.universe,\\n      subscribeToMore: {\\n        document: ON_BEEKAST_UNIVERSE_CHANGE,\\n        variable () {\\n          return { poleId: this.poleId };\\n        },\\n        updateQuery (previousResult, { data: { changes } }) {\\n          return merge(previousResult, changes);\\n        }\\n      }\\n    },\\n  }\\n}\\n</script>\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"...\\\" file=./scenarios/beekast-universe/beekast-universe-comparaison.vue\",\n    \"title\": \"\\\"...\\\"\",\n    \"file\": \"./scenarios/beekast-universe/beekast-universe-comparaison.vue\"\n  }), \"<template>\\n  <div class=\\\"GoToChiotteScenario\\\">\\n    <WarScene v-if=\\\"universe.ongoingWar\\\" :universe=\\\"universe\\\"/>\\n    <ChiotteScene \\n      v-else-if=\\\"universe.me.selectedChiotte\\\" \\n      :chiotte=\\\"universe.me.selectedChiotte\\\"/>\\n    <DesktopScene v-else :universe=\\\"universe\\\"></DesktopScene>\\n  </div>\\n</template>\\n\\n<script>\\nexport default {\\n  apollo: {\\n    universe: {\\n      query: GET_BEEKAST_UNIVERSE,\\n      variable () {\\n        return { poleId: this.poleId };\\n      },\\n      update: (data) => data.universe,\\n      subscribeToMore: {\\n        document: ON_BEEKAST_UNIVERSE_CHANGE,\\n        variable () {\\n          return { poleId: this.poleId };\\n        },\\n        updateQuery (previousResult, { data: { changes } }) {\\n          return merge(previousResult, changes);\\n        }\\n      }\\n    },\\n  }\\n}\\n</script>\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"La demande...\\\" file=./scenarios/beekast-universe/beekast-universe-comparaison.vue\",\n    \"title\": \"\\\"La\",\n    \"demande...\\\"\": true,\n    \"file\": \"./scenarios/beekast-universe/beekast-universe-comparaison.vue\"\n  }), \"<template>\\n  <div class=\\\"GoToChiotteScenario\\\">\\n    <WarScene v-if=\\\"universe.ongoingWar\\\" :universe=\\\"universe\\\"/>\\n    <ChiotteScene \\n      v-else-if=\\\"universe.me.selectedChiotte\\\" \\n      :chiotte=\\\"universe.me.selectedChiotte\\\"/>\\n    <DesktopScene v-else :universe=\\\"universe\\\"></DesktopScene>\\n  </div>\\n</template>\\n\\n<script>\\nexport default {\\n  apollo: {\\n    universe: {\\n      query: GET_BEEKAST_UNIVERSE,\\n      variable () {\\n        return { poleId: this.poleId };\\n      },\\n      update: (data) => data.universe,\\n      subscribeToMore: {\\n        document: ON_BEEKAST_UNIVERSE_CHANGE,\\n        variable () {\\n          return { poleId: this.poleId };\\n        },\\n        updateQuery (previousResult, { data: { changes } }) {\\n          return merge(previousResult, changes);\\n        }\\n      }\\n    },\\n  }\\n}\\n</script>\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"devient\\\" file=./scenarios/dream/dream-component.vue\",\n    \"title\": \"\\\"devient\\\"\",\n    \"file\": \"./scenarios/dream/dream-component.vue\"\n  }), \"<template>\\n  <div class=\\\"GoToChiotteScenario\\\">\\n    <WarScene v-if=\\\"$store.ongoingWar\\\" :agence=\\\"$store.agence\\\"/>\\n    <ChiotteScene \\n      v-else-if=\\\"$store.selectedChiotte\\\" \\n      :chiotte=\\\"$store.selectedChiotte\\\"/>\\n    <DesktopScene v-else :agence=\\\"$store.agence\\\"></DesktopScene>\\n  </div>\\n</template>\\n\\n<script>\\nexport default {\\n  created () {\\n    this.$socket.emit('agence.join');\\n  }\\n}\\n</script>\\n\")))), mdx(\"hr\", null), mdx(\"h1\", null, \"17\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Nombre de lignes dans le composant\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"contre 156 sans template !\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Le composant a \\xE9t\\xE9 reduit de 90% \"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Store is that simple. Forever.\\\" file=./scenarios/dream/dream-store.js\",\n    \"title\": \"\\\"Store\",\n    \"is\": true,\n    \"that\": true,\n    \"simple.\": true,\n    \"Forever.\\\"\": true,\n    \"file\": \"./scenarios/dream/dream-store.js\"\n  }), \"import stateMerge from 'vue-object-merge';\\nimport Vue from 'vue';\\n\\nconst store = new Vue({\\n  methods: {\\n    merge (gameState) {\\n      stateMerge(this.$data, gameState);\\n    }\\n  }\\n});\\n\\n// ...some socket init stuff here...\\n\\nsocket.on('change', store.merge.bind(store));\\n\\nexport default store;\\n\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Store\\\" file=./scenarios/dream/dream-store.js\",\n    \"title\": \"\\\"Store\\\"\",\n    \"file\": \"./scenarios/dream/dream-store.js\"\n  }), \"import stateMerge from 'vue-object-merge';\\nimport Vue from 'vue';\\n\\nconst store = new Vue({\\n  methods: {\\n    merge (gameState) {\\n      stateMerge(this.$data, gameState);\\n    }\\n  }\\n});\\n\\n// ...some socket init stuff here...\\n\\nsocket.on('change', store.merge.bind(store));\\n\\nexport default store;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Component\\\" file=./scenarios/dream/dream-component.vue\",\n    \"title\": \"\\\"Component\\\"\",\n    \"file\": \"./scenarios/dream/dream-component.vue\"\n  }), \"<template>\\n  <div class=\\\"GoToChiotteScenario\\\">\\n    <WarScene v-if=\\\"$store.ongoingWar\\\" :agence=\\\"$store.agence\\\"/>\\n    <ChiotteScene \\n      v-else-if=\\\"$store.selectedChiotte\\\" \\n      :chiotte=\\\"$store.selectedChiotte\\\"/>\\n    <DesktopScene v-else :agence=\\\"$store.agence\\\"></DesktopScene>\\n  </div>\\n</template>\\n\\n<script>\\nexport default {\\n  created () {\\n    this.$socket.emit('agence.join');\\n  }\\n}\\n</script>\\n\")))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"4 title=\\\"Server is king\\\" file=./scenarios/dream/dream-1.js\",\n    \"title\": \"\\\"Server\",\n    \"is\": true,\n    \"king\\\"\": true,\n    \"file\": \"./scenarios/dream/dream-1.js\"\n  }), \"io.on('connnection', (socket) => {\\n  const state = socket.state = {};\\n\\n  socket.on('agence.join', async ({ agenceId }) => {\\n    state.me = await $user.me();\\n    state.agence = await $agence.findOne({ agenceId }, 'id poles ludo');\\n    state.availableChiottes = await $chiotte.find({ agenceId, available: true });\\n  \\n    socket.emit('state.update', state);\\n  \\n    $agence.getEmployees({ agenceId }).then((employees) => {\\n      state.agence.employees = employees;\\n      socket.emit('state.update', { employees });\\n    });\\n  });\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"5:7 title=\\\"Server is king\\\" file=./scenarios/dream/dream-1.js\",\n    \"5:7\": true,\n    \"title\": \"\\\"Server\",\n    \"is\": true,\n    \"king\\\"\": true,\n    \"file\": \"./scenarios/dream/dream-1.js\"\n  }), \"io.on('connnection', (socket) => {\\n  const state = socket.state = {};\\n\\n  socket.on('agence.join', async ({ agenceId }) => {\\n    state.me = await $user.me();\\n    state.agence = await $agence.findOne({ agenceId }, 'id poles ludo');\\n    state.availableChiottes = await $chiotte.find({ agenceId, available: true });\\n  \\n    socket.emit('state.update', state);\\n  \\n    $agence.getEmployees({ agenceId }).then((employees) => {\\n      state.agence.employees = employees;\\n      socket.emit('state.update', { employees });\\n    });\\n  });\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"9\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"9 title=\\\"Server is king\\\" file=./scenarios/dream/dream-1.js\",\n    \"title\": \"\\\"Server\",\n    \"is\": true,\n    \"king\\\"\": true,\n    \"file\": \"./scenarios/dream/dream-1.js\"\n  }), \"io.on('connnection', (socket) => {\\n  const state = socket.state = {};\\n\\n  socket.on('agence.join', async ({ agenceId }) => {\\n    state.me = await $user.me();\\n    state.agence = await $agence.findOne({ agenceId }, 'id poles ludo');\\n    state.availableChiottes = await $chiotte.find({ agenceId, available: true });\\n  \\n    socket.emit('state.update', state);\\n  \\n    $agence.getEmployees({ agenceId }).then((employees) => {\\n      state.agence.employees = employees;\\n      socket.emit('state.update', { employees });\\n    });\\n  });\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"11:14 title=\\\"Server is king\\\" file=./scenarios/dream/dream-1.js\",\n    \"11:14\": true,\n    \"title\": \"\\\"Server\",\n    \"is\": true,\n    \"king\\\"\": true,\n    \"file\": \"./scenarios/dream/dream-1.js\"\n  }), \"io.on('connnection', (socket) => {\\n  const state = socket.state = {};\\n\\n  socket.on('agence.join', async ({ agenceId }) => {\\n    state.me = await $user.me();\\n    state.agence = await $agence.findOne({ agenceId }, 'id poles ludo');\\n    state.availableChiottes = await $chiotte.find({ agenceId, available: true });\\n  \\n    socket.emit('state.update', state);\\n  \\n    $agence.getEmployees({ agenceId }).then((employees) => {\\n      state.agence.employees = employees;\\n      socket.emit('state.update', { employees });\\n    });\\n  });\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Downloading brain...\\\" file=./scenarios/dream/dream-2.js\",\n    \"title\": \"\\\"Downloading\",\n    \"brain...\\\"\": true,\n    \"file\": \"./scenarios/dream/dream-2.js\"\n  }), \"io.on('connnection', async (socket) => {\\n  const state = State(socket);\\n  state.update({ me: await $user.me() }).flush();\\n\\n  socket.on('agence.join', async ({ agenceId }) => {\\n    state\\n      .update({\\n        agence: await $agence.findOne({ agenceId }, 'id accidents'),\\n        availableChiottes: await $chiotte.find({ agenceId, available: true }),\\n        ongoingWar: false\\n      })\\n      .compute('selectedChiotte', () => socket.user.canChier && !state.ongoingWar && state.availableChiottes?.[0])\\n      .flush();\\n  \\n    const employees = await $agence.getEmployees({ agenceId });\\n    state.update({ $merge: { agence: { employees } } }).flush();\\n\\n    Micro.on('ludo.clock', (ludo, clock) => {\\n      if (clock.time !== '3pm') return;\\n\\n      state.update({\\n        availableChiottes: {\\n          $pull: { participantId: ludo.id }\\n        }\\n      }).flush();\\n    });\\n\\n    Micro.on('war.started', agenceId, () => {\\n      state.update({ ongoingWar: true }).flush();\\n\\n      const collateralDamage = await $user.fireRocket({ \\n        from: state.user.id, \\n        to: random(state.agence.employees),\\n      });\\n\\n      state.update({ \\n        accidents: {\\n          $push: collateralDamage\\n        }\\n      }).flush();\\n    });\\n  });\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Downloading brain...\\\" 2:3 file=./scenarios/dream/dream-2.js\",\n    \"title\": \"\\\"Downloading\",\n    \"brain...\\\"\": true,\n    \"2:3\": true,\n    \"file\": \"./scenarios/dream/dream-2.js\"\n  }), \"io.on('connnection', async (socket) => {\\n  const state = State(socket);\\n  state.update({ me: await $user.me() }).flush();\\n\\n  socket.on('agence.join', async ({ agenceId }) => {\\n    state\\n      .update({\\n        agence: await $agence.findOne({ agenceId }, 'id accidents'),\\n        availableChiottes: await $chiotte.find({ agenceId, available: true }),\\n        ongoingWar: false\\n      })\\n      .compute('selectedChiotte', () => socket.user.canChier && !state.ongoingWar && state.availableChiottes?.[0])\\n      .flush();\\n  \\n    const employees = await $agence.getEmployees({ agenceId });\\n    state.update({ $merge: { agence: { employees } } }).flush();\\n\\n    Micro.on('ludo.clock', (ludo, clock) => {\\n      if (clock.time !== '3pm') return;\\n\\n      state.update({\\n        availableChiottes: {\\n          $pull: { participantId: ludo.id }\\n        }\\n      }).flush();\\n    });\\n\\n    Micro.on('war.started', agenceId, () => {\\n      state.update({ ongoingWar: true }).flush();\\n\\n      const collateralDamage = await $user.fireRocket({ \\n        from: state.user.id, \\n        to: random(state.agence.employees),\\n      });\\n\\n      state.update({ \\n        accidents: {\\n          $push: collateralDamage\\n        }\\n      }).flush();\\n    });\\n  });\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Downloading brain...\\\" 6:13 file=./scenarios/dream/dream-2.js\",\n    \"title\": \"\\\"Downloading\",\n    \"brain...\\\"\": true,\n    \"6:13\": true,\n    \"file\": \"./scenarios/dream/dream-2.js\"\n  }), \"io.on('connnection', async (socket) => {\\n  const state = State(socket);\\n  state.update({ me: await $user.me() }).flush();\\n\\n  socket.on('agence.join', async ({ agenceId }) => {\\n    state\\n      .update({\\n        agence: await $agence.findOne({ agenceId }, 'id accidents'),\\n        availableChiottes: await $chiotte.find({ agenceId, available: true }),\\n        ongoingWar: false\\n      })\\n      .compute('selectedChiotte', () => socket.user.canChier && !state.ongoingWar && state.availableChiottes?.[0])\\n      .flush();\\n  \\n    const employees = await $agence.getEmployees({ agenceId });\\n    state.update({ $merge: { agence: { employees } } }).flush();\\n\\n    Micro.on('ludo.clock', (ludo, clock) => {\\n      if (clock.time !== '3pm') return;\\n\\n      state.update({\\n        availableChiottes: {\\n          $pull: { participantId: ludo.id }\\n        }\\n      }).flush();\\n    });\\n\\n    Micro.on('war.started', agenceId, () => {\\n      state.update({ ongoingWar: true }).flush();\\n\\n      const collateralDamage = await $user.fireRocket({ \\n        from: state.user.id, \\n        to: random(state.agence.employees),\\n      });\\n\\n      state.update({ \\n        accidents: {\\n          $push: collateralDamage\\n        }\\n      }).flush();\\n    });\\n  });\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Downloading brain...\\\" 15:16 file=./scenarios/dream/dream-2.js\",\n    \"title\": \"\\\"Downloading\",\n    \"brain...\\\"\": true,\n    \"15:16\": true,\n    \"file\": \"./scenarios/dream/dream-2.js\"\n  }), \"io.on('connnection', async (socket) => {\\n  const state = State(socket);\\n  state.update({ me: await $user.me() }).flush();\\n\\n  socket.on('agence.join', async ({ agenceId }) => {\\n    state\\n      .update({\\n        agence: await $agence.findOne({ agenceId }, 'id accidents'),\\n        availableChiottes: await $chiotte.find({ agenceId, available: true }),\\n        ongoingWar: false\\n      })\\n      .compute('selectedChiotte', () => socket.user.canChier && !state.ongoingWar && state.availableChiottes?.[0])\\n      .flush();\\n  \\n    const employees = await $agence.getEmployees({ agenceId });\\n    state.update({ $merge: { agence: { employees } } }).flush();\\n\\n    Micro.on('ludo.clock', (ludo, clock) => {\\n      if (clock.time !== '3pm') return;\\n\\n      state.update({\\n        availableChiottes: {\\n          $pull: { participantId: ludo.id }\\n        }\\n      }).flush();\\n    });\\n\\n    Micro.on('war.started', agenceId, () => {\\n      state.update({ ongoingWar: true }).flush();\\n\\n      const collateralDamage = await $user.fireRocket({ \\n        from: state.user.id, \\n        to: random(state.agence.employees),\\n      });\\n\\n      state.update({ \\n        accidents: {\\n          $push: collateralDamage\\n        }\\n      }).flush();\\n    });\\n  });\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Downloading brain...\\\" 18:26 file=./scenarios/dream/dream-2.js\",\n    \"title\": \"\\\"Downloading\",\n    \"brain...\\\"\": true,\n    \"18:26\": true,\n    \"file\": \"./scenarios/dream/dream-2.js\"\n  }), \"io.on('connnection', async (socket) => {\\n  const state = State(socket);\\n  state.update({ me: await $user.me() }).flush();\\n\\n  socket.on('agence.join', async ({ agenceId }) => {\\n    state\\n      .update({\\n        agence: await $agence.findOne({ agenceId }, 'id accidents'),\\n        availableChiottes: await $chiotte.find({ agenceId, available: true }),\\n        ongoingWar: false\\n      })\\n      .compute('selectedChiotte', () => socket.user.canChier && !state.ongoingWar && state.availableChiottes?.[0])\\n      .flush();\\n  \\n    const employees = await $agence.getEmployees({ agenceId });\\n    state.update({ $merge: { agence: { employees } } }).flush();\\n\\n    Micro.on('ludo.clock', (ludo, clock) => {\\n      if (clock.time !== '3pm') return;\\n\\n      state.update({\\n        availableChiottes: {\\n          $pull: { participantId: ludo.id }\\n        }\\n      }).flush();\\n    });\\n\\n    Micro.on('war.started', agenceId, () => {\\n      state.update({ ongoingWar: true }).flush();\\n\\n      const collateralDamage = await $user.fireRocket({ \\n        from: state.user.id, \\n        to: random(state.agence.employees),\\n      });\\n\\n      state.update({ \\n        accidents: {\\n          $push: collateralDamage\\n        }\\n      }).flush();\\n    });\\n  });\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Downloading brain...\\\" 28:40 file=./scenarios/dream/dream-2.js\",\n    \"title\": \"\\\"Downloading\",\n    \"brain...\\\"\": true,\n    \"28:40\": true,\n    \"file\": \"./scenarios/dream/dream-2.js\"\n  }), \"io.on('connnection', async (socket) => {\\n  const state = State(socket);\\n  state.update({ me: await $user.me() }).flush();\\n\\n  socket.on('agence.join', async ({ agenceId }) => {\\n    state\\n      .update({\\n        agence: await $agence.findOne({ agenceId }, 'id accidents'),\\n        availableChiottes: await $chiotte.find({ agenceId, available: true }),\\n        ongoingWar: false\\n      })\\n      .compute('selectedChiotte', () => socket.user.canChier && !state.ongoingWar && state.availableChiottes?.[0])\\n      .flush();\\n  \\n    const employees = await $agence.getEmployees({ agenceId });\\n    state.update({ $merge: { agence: { employees } } }).flush();\\n\\n    Micro.on('ludo.clock', (ludo, clock) => {\\n      if (clock.time !== '3pm') return;\\n\\n      state.update({\\n        availableChiottes: {\\n          $pull: { participantId: ludo.id }\\n        }\\n      }).flush();\\n    });\\n\\n    Micro.on('war.started', agenceId, () => {\\n      state.update({ ongoingWar: true }).flush();\\n\\n      const collateralDamage = await $user.fireRocket({ \\n        from: state.user.id, \\n        to: random(state.agence.employees),\\n      });\\n\\n      state.update({ \\n        accidents: {\\n          $push: collateralDamage\\n        }\\n      }).flush();\\n    });\\n  });\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Downloading brain...\\\" file=./scenarios/dream/dream-3.js\",\n    \"title\": \"\\\"Downloading\",\n    \"brain...\\\"\": true,\n    \"file\": \"./scenarios/dream/dream-3.js\"\n  }), \"io.on('connnection', async (socket) => {\\n  const state = State(socket);\\n  state.update({ me: await $user.me() }).flush();\\n\\n  socket.on('agence.join', async ({ agenceId }) => {\\n    state\\n      .update({\\n        agence: await $agence.findOne({ agenceId }, 'id accidents'),\\n        availableChiottes: await $chiotte.find({ agenceId, available: true }),\\n        ongoingWar: false\\n      })\\n      .compute('selectedChiotte', () => socket.user.canChier && !state.ongoingWar && state.availableChiottes?.[0])\\n      .flush();\\n  \\n    const employees = await $agence.getEmployees({ agenceId });\\n    state.merge({ agence: { employees } }).flush();\\n    // state.agence.employees.$merge(employees).flush();\\n\\n    Micro.on('ludo.clock', (ludo, clock) => {\\n      if (clock.time !== '3pm') return;\\n\\n      state.update({\\n        availableChiottes: {\\n          $pull: { participantId: ludo.id }\\n        }\\n      }).flush();\\n    });\\n\\n    Micro.on('war.started', agenceId, () => {\\n      // DB DRIVER FOR THE WIN !\\n      const collateralDamage = random(state.agence.employees);\\n\\n      state.update({\\n        ongoingWar: true,\\n        accidents: {\\n          $push: collateralDamage\\n        }\\n      }).flush();\\n    });\\n  });\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Downloading brain...\\\" 16:17 file=./scenarios/dream/dream-3.js\",\n    \"title\": \"\\\"Downloading\",\n    \"brain...\\\"\": true,\n    \"16:17\": true,\n    \"file\": \"./scenarios/dream/dream-3.js\"\n  }), \"io.on('connnection', async (socket) => {\\n  const state = State(socket);\\n  state.update({ me: await $user.me() }).flush();\\n\\n  socket.on('agence.join', async ({ agenceId }) => {\\n    state\\n      .update({\\n        agence: await $agence.findOne({ agenceId }, 'id accidents'),\\n        availableChiottes: await $chiotte.find({ agenceId, available: true }),\\n        ongoingWar: false\\n      })\\n      .compute('selectedChiotte', () => socket.user.canChier && !state.ongoingWar && state.availableChiottes?.[0])\\n      .flush();\\n  \\n    const employees = await $agence.getEmployees({ agenceId });\\n    state.merge({ agence: { employees } }).flush();\\n    // state.agence.employees.$merge(employees).flush();\\n\\n    Micro.on('ludo.clock', (ludo, clock) => {\\n      if (clock.time !== '3pm') return;\\n\\n      state.update({\\n        availableChiottes: {\\n          $pull: { participantId: ludo.id }\\n        }\\n      }).flush();\\n    });\\n\\n    Micro.on('war.started', agenceId, () => {\\n      // DB DRIVER FOR THE WIN !\\n      const collateralDamage = random(state.agence.employees);\\n\\n      state.update({\\n        ongoingWar: true,\\n        accidents: {\\n          $push: collateralDamage\\n        }\\n      }).flush();\\n    });\\n  });\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Downloading brain...\\\" 30:31 file=./scenarios/dream/dream-3.js\",\n    \"title\": \"\\\"Downloading\",\n    \"brain...\\\"\": true,\n    \"30:31\": true,\n    \"file\": \"./scenarios/dream/dream-3.js\"\n  }), \"io.on('connnection', async (socket) => {\\n  const state = State(socket);\\n  state.update({ me: await $user.me() }).flush();\\n\\n  socket.on('agence.join', async ({ agenceId }) => {\\n    state\\n      .update({\\n        agence: await $agence.findOne({ agenceId }, 'id accidents'),\\n        availableChiottes: await $chiotte.find({ agenceId, available: true }),\\n        ongoingWar: false\\n      })\\n      .compute('selectedChiotte', () => socket.user.canChier && !state.ongoingWar && state.availableChiottes?.[0])\\n      .flush();\\n  \\n    const employees = await $agence.getEmployees({ agenceId });\\n    state.merge({ agence: { employees } }).flush();\\n    // state.agence.employees.$merge(employees).flush();\\n\\n    Micro.on('ludo.clock', (ludo, clock) => {\\n      if (clock.time !== '3pm') return;\\n\\n      state.update({\\n        availableChiottes: {\\n          $pull: { participantId: ludo.id }\\n        }\\n      }).flush();\\n    });\\n\\n    Micro.on('war.started', agenceId, () => {\\n      // DB DRIVER FOR THE WIN !\\n      const collateralDamage = random(state.agence.employees);\\n\\n      state.update({\\n        ongoingWar: true,\\n        accidents: {\\n          $push: collateralDamage\\n        }\\n      }).flush();\\n    });\\n  });\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"34\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Downloading brain...\\\" 34 file=./scenarios/dream/dream-3.js\",\n    \"title\": \"\\\"Downloading\",\n    \"brain...\\\"\": true,\n    \"file\": \"./scenarios/dream/dream-3.js\"\n  }), \"io.on('connnection', async (socket) => {\\n  const state = State(socket);\\n  state.update({ me: await $user.me() }).flush();\\n\\n  socket.on('agence.join', async ({ agenceId }) => {\\n    state\\n      .update({\\n        agence: await $agence.findOne({ agenceId }, 'id accidents'),\\n        availableChiottes: await $chiotte.find({ agenceId, available: true }),\\n        ongoingWar: false\\n      })\\n      .compute('selectedChiotte', () => socket.user.canChier && !state.ongoingWar && state.availableChiottes?.[0])\\n      .flush();\\n  \\n    const employees = await $agence.getEmployees({ agenceId });\\n    state.merge({ agence: { employees } }).flush();\\n    // state.agence.employees.$merge(employees).flush();\\n\\n    Micro.on('ludo.clock', (ludo, clock) => {\\n      if (clock.time !== '3pm') return;\\n\\n      state.update({\\n        availableChiottes: {\\n          $pull: { participantId: ludo.id }\\n        }\\n      }).flush();\\n    });\\n\\n    Micro.on('war.started', agenceId, () => {\\n      // DB DRIVER FOR THE WIN !\\n      const collateralDamage = random(state.agence.employees);\\n\\n      state.update({\\n        ongoingWar: true,\\n        accidents: {\\n          $push: collateralDamage\\n        }\\n      }).flush();\\n    });\\n  });\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./scenarios/dream/dream-4.js\",\n    \"file\": \"./scenarios/dream/dream-4.js\"\n  }), \"io.on('connnection', async (socket) => {\\n  const state = State(socket);\\n  state.update({ me: await $user.me() }).flush();\\n\\n  socket.on('agence.join', async ({ agenceId }) => {\\n    state\\n      .merge(await $agence.getSnapshot({ agenceId }))\\n      .compute('selectedChiotte', () => socket.user.canChier && !state.ongoingWar && state.availableChiottes?.[0])\\n      .flush();\\n\\n    Micro.on('agence.snapshot.updated', agenceId, (changes) => {\\n      state.merge(changes).flush();\\n    });\\n  });\\n\\n  socket.on('war.declare', () => {\\n    if (!state.agenceId) return;\\n\\n    const collateralDamage = random(state.agence.employees);\\n    \\n    state.update({\\n      ongoingWar: true,\\n      accidents: {\\n        $push: collateralDamage\\n      }\\n    }).flush();\\n  });\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Almost done...\\\" file=./scenarios/dream/dream-4.js\",\n    \"title\": \"\\\"Almost\",\n    \"done...\\\"\": true,\n    \"file\": \"./scenarios/dream/dream-4.js\"\n  }), \"io.on('connnection', async (socket) => {\\n  const state = State(socket);\\n  state.update({ me: await $user.me() }).flush();\\n\\n  socket.on('agence.join', async ({ agenceId }) => {\\n    state\\n      .merge(await $agence.getSnapshot({ agenceId }))\\n      .compute('selectedChiotte', () => socket.user.canChier && !state.ongoingWar && state.availableChiottes?.[0])\\n      .flush();\\n\\n    Micro.on('agence.snapshot.updated', agenceId, (changes) => {\\n      state.merge(changes).flush();\\n    });\\n  });\\n\\n  socket.on('war.declare', () => {\\n    if (!state.agenceId) return;\\n\\n    const collateralDamage = random(state.agence.employees);\\n    \\n    state.update({\\n      ongoingWar: true,\\n      accidents: {\\n        $push: collateralDamage\\n      }\\n    }).flush();\\n  });\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Simple, Basique.\\\" file=./scenarios/dream/dream-5.js\",\n    \"title\": \"\\\"Simple,\",\n    \"Basique.\\\"\": true,\n    \"file\": \"./scenarios/dream/dream-5.js\"\n  }), \"io.on('connnection', async (socket) => {\\n  const state = State(socket);\\n\\n  state.update({ me: await $user.me() });\\n\\n  socket.on('agence.join', async ({ agenceId }) => {\\n    state\\n      .merge(await $agence.getSnapshot({ agenceId }))\\n      .compute('selectedChiotte', () => socket.user.canChier && !state.ongoingWar && state.availableChiottes?.[0]);\\n\\n    Micro.on('agence.snapshot.updated', agenceId, state.merge.bind(state));\\n  });\\n\\n  socket.on('war.declare', () => {\\n    if (!state.agenceId) return;\\n\\n    state.update({\\n      ongoingWar: true,\\n      accidents: {\\n        $push: random(state.agence.employees)\\n      }\\n    });\\n  });\\n\\n  Game.tick(() => state.flush());\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Simple, Basique.\\\" file=./scenarios/dream/dream-5.js\",\n    \"title\": \"\\\"Simple,\",\n    \"Basique.\\\"\": true,\n    \"file\": \"./scenarios/dream/dream-5.js\"\n  }), \"io.on('connnection', async (socket) => {\\n  const state = State(socket);\\n\\n  state.update({ me: await $user.me() });\\n\\n  socket.on('agence.join', async ({ agenceId }) => {\\n    state\\n      .merge(await $agence.getSnapshot({ agenceId }))\\n      .compute('selectedChiotte', () => socket.user.canChier && !state.ongoingWar && state.availableChiottes?.[0]);\\n\\n    Micro.on('agence.snapshot.updated', agenceId, state.merge.bind(state));\\n  });\\n\\n  socket.on('war.declare', () => {\\n    if (!state.agenceId) return;\\n\\n    state.update({\\n      ongoingWar: true,\\n      accidents: {\\n        $push: random(state.agence.employees)\\n      }\\n    });\\n  });\\n\\n  Game.tick(() => state.flush());\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Almost Perfect.\\\" file=./scenarios/dream/dream-6.js\",\n    \"title\": \"\\\"Almost\",\n    \"Perfect.\\\"\": true,\n    \"file\": \"./scenarios/dream/dream-6.js\"\n  }), \"io.on('connnection', async (socket) => {\\n  const agenceStore = Store(socket);\\n  const userStore = Store(socket);\\n  const appStore = AppStore(socket, { agenceStore, userStore });\\n\\n  const userSnapshot = await Snapshot('user', { token: socket.token }, initialUserState);\\n  userStore.link(userSnapshot);\\n\\n  socket.on('agence.join', async ({ agenceId }) => {\\n    // i'm pretty sure initialAgenceState may be duplicate though :(\\n    const agenceSnapeshot = await Snapshot('agence', { agenceId }, initialAgenceSate);\\n    agenceStore.link(agenceSnapeshot);\\n\\n    const selectedChiotte = socket.user.canChier && !agenceStore.ongoingWar && state.availableChiottes?.[0];\\n    userStore.update({ selectedChiotte });\\n  });\\n\\n  socket.on('agence.duplicate', () => {\\n    if (!agenceStore.__isAlive) return;\\n\\n    const newAgence = omit(agenceStore.clone(), ['id', 'employees.id']);\\n    userStore.update({ agences: { $push: newAgence } });\\n  });\\n\\n  socket.on('agence.leave', () => agenceStore.destroy());\\n\\n  socket.on('war.declare', () => {\\n    if (!agenceStore.__isAlive) return;\\n\\n    agenceStore.update({\\n      ongoingWar: true,\\n      accidents: {\\n        $push: random(agenceStore.employees)\\n      }\\n    });\\n  });\\n\\n  // flush processer must await or use a stream service\\n  // to be able to create an optimistic reponse\\n  // and then rollback to the last snapshot if anything happens\\n  Game.tick(() => appStore.flush());\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Perfection.\\\" file=./scenarios/dream/dream-6.js\",\n    \"title\": \"\\\"Perfection.\\\"\",\n    \"file\": \"./scenarios/dream/dream-6.js\"\n  }), \"io.on('connnection', async (socket) => {\\n  const agenceStore = Store(socket);\\n  const userStore = Store(socket);\\n  const appStore = AppStore(socket, { agenceStore, userStore });\\n\\n  const userSnapshot = await Snapshot('user', { token: socket.token }, initialUserState);\\n  userStore.link(userSnapshot);\\n\\n  socket.on('agence.join', async ({ agenceId }) => {\\n    // i'm pretty sure initialAgenceState may be duplicate though :(\\n    const agenceSnapeshot = await Snapshot('agence', { agenceId }, initialAgenceSate);\\n    agenceStore.link(agenceSnapeshot);\\n\\n    const selectedChiotte = socket.user.canChier && !agenceStore.ongoingWar && state.availableChiottes?.[0];\\n    userStore.update({ selectedChiotte });\\n  });\\n\\n  socket.on('agence.duplicate', () => {\\n    if (!agenceStore.__isAlive) return;\\n\\n    const newAgence = omit(agenceStore.clone(), ['id', 'employees.id']);\\n    userStore.update({ agences: { $push: newAgence } });\\n  });\\n\\n  socket.on('agence.leave', () => agenceStore.destroy());\\n\\n  socket.on('war.declare', () => {\\n    if (!agenceStore.__isAlive) return;\\n\\n    agenceStore.update({\\n      ongoingWar: true,\\n      accidents: {\\n        $push: random(agenceStore.employees)\\n      }\\n    });\\n  });\\n\\n  // flush processer must await or use a stream service\\n  // to be able to create an optimistic reponse\\n  // and then rollback to the last snapshot if anything happens\\n  Game.tick(() => appStore.flush());\\n});\\n\"))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Reflechir \\xE0 la gestion d'erreurs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Actuellement le client front crash parce qu'on recoit des events non control\\xE9s, le flux\\nn'est pas filtre..\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"avec Game.tick on a meme pas besoin du systeme de zone pour le poc\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"26 + 17\"), mdx(\"h1\", null, \"43\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"La totalite du code d'exemple\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"80% du code back supprim\\xE9 avec le driver DB\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"tout le front qui pourrait etre degage grace \\xE0 ca\"))))), mdx(\"hr\", null), mdx(\"h1\", null, \"And much more\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Driver\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Tick... (batch commands)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"No microlith, No microservice, No monolith, ALGOLITH\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"TODO: destroy listener on leave, errors...\"))), mdx(\"hr\", null), mdx(Image, {\n    src: \"images/dream-full-white.svg\",\n    size: \"30%\",\n    mdxType: \"Image\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"matchPath":"/*","id":"f5e053ca-64b5-5560-a9c4-59746b060986","slug":"","title":"90"}}}